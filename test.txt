import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { Router, RouterModule } from '@angular/router';
import { HeaderComponent } from '../header/header.component';
import { SidebarComponent } from '../sidebar/sidebar.component';
import { StationTitleComponent } from '../station-title/station-title.component';
import { FormBuilder, FormGroup } from '@angular/forms';
import { ReportsService } from '../services/reports.service'; 
import { StationDatesService } from '../services/station-dates.service';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
import { MatTableModule } from '@angular/material/table';
import { MatNativeDateModule } from '@angular/material/core';
import { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';
import { MatTableDataSource } from '@angular/material/table';
import { ViewChild } from '@angular/core';


@Component({
  selector: 'app-reports',
  standalone: true,
  imports: [
    CommonModule,
    RouterModule,
    HeaderComponent,
    SidebarComponent,
    StationTitleComponent,
    ReactiveFormsModule,
    MatDatepickerModule,
    MatFormFieldModule,
    MatInputModule,
    MatButtonModule,
    MatTableModule,
    MatNativeDateModule,
    MatPaginatorModule
  ],
  templateUrl: './reports.component.html',
  styleUrl: './reports.component.css'
})
export class ReportsComponent implements OnInit {
  @ViewChild(MatPaginator) paginator!: MatPaginator;

  today = new Date();
  stationId: string = '';
  reportForm: FormGroup;
  timestamp: string = '';
  reportData: any[] = [];
  dataSource = new MatTableDataSource<any>();
  isLoading = false;

  isCollapsed = false;

  onToggleSidebar(collapsed: boolean) {
    this.isCollapsed = collapsed;
  }

  public minStartDate: Date = new Date(); // Default to today's date
  public maxDate: Date = new Date();
  public showExportButton: boolean = false;

  public headersMap: { [key: string]: string } = {
    timestamp: 'Timestamp',
    station_id: 'Station ID',
    RF_1_Tot300s: 'Rainfall (mm)',
    RH_1_Avg: 'Relative Humidity (%)',
    SM_1_Avg: 'Soil Moisture (%)',
    SWin_1_Avg: 'Solar Radiation (W/m2)',
    Tair_1_Avg: 'Temperature (C)',
    WS_1_Avg: 'Wind Speed (m/s)'
  };

  public headers = Object.keys(this.headersMap);   
  public displayHeaders = Object.values(this.headersMap);

  constructor(
    private route: ActivatedRoute,
    private fb: FormBuilder,
    private reportsService: ReportsService,
    private StationDatesService: StationDatesService
  ) {
    this.reportForm = this.fb.group({
      startDate: [''],
      endDate: ['']
    });
  }

  ngOnInit(): void {
    const today = new Date();
    this.maxDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());


    console.log('Max Date String:', this.maxDate);
    this.route.queryParams.subscribe(params => {
      this.stationId = params['id'] || 'default_station_id';
      this.initializeForm(); 
      this.fetchStationData(this.stationId);
    });

  }
  ngAfterViewInit(): void {
    this.dataSource.paginator = this.paginator;
  }

  initializeForm(): void {
    this.reportForm = this.fb.group({
      startDate: [''],
      endDate: ['']
    });

    this.reportForm.get('startDate')?.valueChanges.subscribe(startDate => {
      if (startDate) {
        const endDateControl = this.reportForm.get('endDate');
        endDateControl?.setValue('');
        endDateControl?.setValidators([
          (control) => control.value && control.value < startDate ? { invalidDate: true } : null
        ]);
        endDateControl?.updateValueAndValidity();
      }
    });
  }

  onSubmit(): void {
    this.isLoading = true;
    let { startDate, endDate } = this.reportForm.value;
    try {
      startDate = this.formatDateToHST(startDate, 'T00:00:00-10:00'); 
      endDate = this.formatDateToHST(endDate, 'T23:59:59-10:00'); 
    } catch (error) {
      console.error('Date processing error:', error);
      this.isLoading = false;
      return;
    }

    this.reportsService.getData(this.stationId, startDate, endDate).subscribe(
      (data) => {
        console.log('Raw Data Length:', data.length); 
        this.reportData = data;
        this.formatTableData();
        this.showExportButton = this.dataSource.data.length > 0;
        this.isLoading = false;
      },
      (error) => {
        console.error('Error fetching report data:', error);
        this.isLoading = false;
      }
    );
  }
}
