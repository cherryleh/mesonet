async fetchStationDetails(stationId: string): Promise<void> {
    try {
        // URLs for 24-hour statistics (from local JSONs)
        const variableJsonUrls: { [key: string]: string } = {
            "BattVolt": "https://raw.githubusercontent.com/cherryleh/mesonet/data-branch/data/BattVolt.json",
            "CellStr": "https://raw.githubusercontent.com/cherryleh/mesonet/data-branch/data/CellStr.json",
            "CellQlt": "https://raw.githubusercontent.com/cherryleh/mesonet/data-branch/data/CellQlt.json",
            "RHenc": "https://raw.githubusercontent.com/cherryleh/mesonet/data-branch/data/RHenc.json"
        };

        // API URL for current values
        const latestValuesApiUrl = `${this.measurementsUrl}&var_ids=BattVolt,CellStr,CellQlt,RHenc&station_ids=${stationId}&local_tz=True&limit=1`;

        // Fetch the 24-hour statistics from JSON files
        const jsonRequests = Object.keys(variableJsonUrls).map(async (variable) => {
            const response = await fetch(variableJsonUrls[variable]);
            const data: Record<string, { value: string; timestamp: string }> = await response.json();
            return { variable, data };
        });

        // Fetch current value from the API
        const [latestValuesResponse, ...jsonResponses] = await Promise.all([
            fetch(latestValuesApiUrl, { method: 'GET', headers: { 'Authorization': `Bearer ${this.apiToken}`, 'Content-Type': 'application/json' } }),
            ...jsonRequests
        ]);

        const latestMeasurements: Measurement[] = await latestValuesResponse.json();

        // Extract 24-hour statistics
        const latestDetails: { [key: string]: string } = {};
        jsonResponses.forEach(({ variable, data }) => {
            const measurement = data[stationId];
            if (measurement) {
                latestDetails[`24H ${this.getVariableName(variable)}`] = measurement.value;
            } else {
                latestDetails[`24H ${this.getVariableName(variable)}`] = "No Data";
            }
        });

        // Extract current values from the API
        latestMeasurements.forEach(measurement => {
            latestDetails[`Current ${this.getVariableName(measurement.variable)}`] = measurement.value;
        });

        console.log("Final latestDetails object:", latestDetails);

        // Format latest timestamp for display
        let latestTimestamp = latestMeasurements.length > 0 ? latestMeasurements[0].timestamp : "";
        let formattedTimestamp = latestTimestamp ? this.formatTimestamp(latestTimestamp) : "No Data";

        this.selectedStation = {
            ...this.selectedStation,
            details: latestDetails,
            detailsTimestamp: formattedTimestamp
        };

        console.log("Updated Station Details:", this.selectedStation);
        this.cdr.detectChanges();
    } catch (error) {
        console.error("Error fetching station details:", error);
        this.selectedStation = { ...this.selectedStation, details: {} };
        this.cdr.detectChanges();
    }
}
