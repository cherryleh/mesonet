updateChart(seriesData: Highcharts.SeriesOptionsType[]): void {
  if (this.chart) {
    while (this.chart.series.length) {
      this.chart.series[0].remove(false);
    }

    const variableList = this.selectedVariable.split(',');

    if (variableList.length > 1) {
      const yAxisTitles = variableList.map(variable => {
        const originalTitle = this.variables.find(v => v.value === variable)?.yAxisTitle || 'Value';
        if (variable === 'Tair_1_Avg' && this.selectedUnit === 'standard') {
          return originalTitle.replace('째C', '째F');
        } else if (variable === 'RF_1_Tot300s' && this.selectedUnit === 'standard') {
          return originalTitle.replace('mm', 'in');
        }
        return originalTitle;
      });

      // Ensure Rainfall is on the opposite axis
      const yAxisConfig = variableList.map((variable, index) => ({
        title: { text: yAxisTitles[index] || 'Value' },
        opposite: variable === 'RF_1_Tot300s', // Rainfall on the opposite axis
        max: variable === 'RF_1_Tot300s' ? this.getRainfallMax(seriesData) : undefined,
      }));

      this.chart?.update({
        yAxis: yAxisConfig,
      });

    } else {
      const variable = this.selectedVariable;
      let yAxisTitle = this.variables.find(v => v.value === variable)?.yAxisTitle || 'Value';
      if (variable === 'Tair_1_Avg' && this.selectedUnit === 'standard') {
        yAxisTitle = yAxisTitle.replace('째C', '째F');
      } else if (variable === 'RF_1_Tot300s' && this.selectedUnit === 'standard') {
        yAxisTitle = yAxisTitle.replace('mm', 'in');
      }

      this.chart?.update({
        yAxis: [{
          title: { text: yAxisTitle },
          max: variable === 'RF_1_Tot300s' ? this.getRainfallMax(seriesData) : undefined,
        }, {
          title: { text: '' },
          opposite: true,
        }],
      });
    }

    seriesData.forEach(series => this.chart?.addSeries(series, false));
    this.chart?.redraw();
  } else {
    console.error('Chart is not initialized yet.');
  }
}
