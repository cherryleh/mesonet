async fetchStationDetails(stationId: string): Promise<void> {
    try {
        const variableJsonUrls: { [key: string]: string } = {
            "BattVolt": "https://raw.githubusercontent.com/cherryleh/mesonet/data-branch/data/BattVolt.json",
            "CellStr": "https://raw.githubusercontent.com/cherryleh/mesonet/data-branch/data/CellStr.json",
            "CellQlt": "https://raw.githubusercontent.com/cherryleh/mesonet/data-branch/data/CellQlt.json",
            "RHenc": "https://raw.githubusercontent.com/cherryleh/mesonet/data-branch/data/RHenc.json"
        };

        // API for latest measurements
        const latestValuesApiUrl = `${this.measurementsUrl}&var_ids=BattVolt,CellStr,CellQlt,RHenc&station_ids=${stationId}&local_tz=True&limit=4`;

        // API for sensor updates (to display "Sensor Latest Update" section)
        const sensorUpdateUrl = "https://raw.githubusercontent.com/cherryleh/mesonet/refs/heads/data-branch/data/latest_measurements.json";

        let latestDetails: { [key: string]: string } = {};

        // Fetch latest variable data from JSON files
        const jsonRequests = Object.keys(variableJsonUrls).map(async (variable) => {
            const response = await fetch(variableJsonUrls[variable]);
            const data: Record<string, { value: string; timestamp: string }> = await response.json();
            return { variable, data };
        });

        // Fetch latest values and sensor updates in parallel
        const [latestValuesResponse, sensorUpdateResponse, ...jsonResponses] = await Promise.all([
            fetch(latestValuesApiUrl, {
                method: 'GET',
                headers: { 'Authorization': `Bearer ${this.apiToken}`, 'Content-Type': 'application/json' }
            }),
            fetch(sensorUpdateUrl).then(response => response.json()).catch(error => {
                console.error("Error fetching sensor update data:", error);
                return [];
            }),
            ...jsonRequests
        ]);

        // Parse responses
        const latestMeasurements: Measurement[] = await latestValuesResponse.json();
        const sensorUpdates: Measurement[] = sensorUpdateResponse;

        console.log("Fetched Sensor Updates:", sensorUpdates);
        console.log("Fetched Latest Measurements:", latestMeasurements);

        // Process variable data from JSON responses
        jsonResponses.forEach(({ variable, data }) => {
            const measurement = data[stationId];
            if (measurement) {
                let formattedValue = parseFloat(measurement.value);

                if (formattedValue === 0) {
                    formattedValue = NaN; // Will be handled as "No Data"
                }

                const variableName = this.getVariableName(variable);

                if (variable === "RHenc") {
                    latestDetails[`24H Max ${variableName}`] = isNaN(formattedValue) ? "No Data" : formattedValue.toString();
                } else {
                    latestDetails[`24H Min ${variableName}`] = isNaN(formattedValue) ? "No Data" : formattedValue.toString();
                }
            }
        });

        // Process latest API measurements
        latestMeasurements.forEach(measurement => {
            if (measurement && measurement.value !== undefined && measurement.value !== null) {
                let formattedValue = parseFloat(String(measurement.value));

                if (formattedValue === 0) {
                    formattedValue = NaN;
                }

                latestDetails[`Current ${this.getVariableName(measurement.variable)}`] = isNaN(formattedValue) ? "No Data" : formattedValue.toString();
            }
        });

        // Process sensor update data
        sensorUpdates.forEach(measurement => {
            if (measurement.station_id === stationId && measurement.timestamp) {
                const timeAgo = this.formatTimeAgo(measurement.timestamp);
                latestDetails[measurement.variable] = timeAgo.text;
            }
        });

        // Get the latest timestamp
        let latestTimestamp = latestMeasurements.length > 0 ? latestMeasurements[0].timestamp : "";
        let formattedTimestamp = latestTimestamp ? this.formatTimestamp(latestTimestamp) : "No Data";

        // Update selected station details
        this.selectedStation = {
            ...this.selectedStation,
            details: latestDetails,
            detailsTimestamp: formattedTimestamp
        };

        console.log("Updated Station Details:", this.selectedStation);
        this.cdr.detectChanges();
    } catch (error) {
        console.error("Error fetching station details:", error);
        this.selectedStation = { ...this.selectedStation, details: {} };
        this.cdr.detectChanges();
    }
}
