fetchData(id: string): void {
  this.isLoading = true; // Show spinner immediately

  this.dataService.getData(id).subscribe({
    next: (response) => {
      // Simulate delay to ensure spinner renders
      setTimeout(() => {
        this.isLoading = false; // Hide spinner after a delay
      }, 300);

      if (response.length > 0) {
        this.latestTimestamp = response[0].timestamp;
      }

      Object.keys(this.variableMapping).forEach((key) => {
        const variableData = response.find(
          (item: any) => item.variable === this.variableMapping[key]
        );
        if (key === 'Temperature' && variableData) {
          const celsius = parseFloat(variableData.value);
          const fahrenheit = (celsius * 1.8) + 32;
          this.variables[key] = `${fahrenheit.toFixed(1)}`;
        } else if (key === 'Rainfall' && variableData) {
          const mm = parseFloat(variableData.value);
          const inches = mm / 25.4;
          this.variables[key] = `${inches.toFixed(1)}`;
        } else if (key === 'Wind Speed' && variableData) {
          const mps = parseFloat(variableData.value);
          const mph = mps * 2.23694;
          this.variables[key] = `${mph.toFixed(1)}`;
        } else if (key === 'Soil Moisture' && variableData) {
          const sm_dec = parseFloat(variableData.value);
          const sm_pct = sm_dec * 100;
          this.variables[key] = `${Math.round(sm_pct)}`;
        } else if (key === 'Relative Humidity' && variableData) {
          this.variables[key] = `${Math.round(variableData.value)}`;
        } else if (key === 'Solar Radiation' && variableData) {
          this.variables[key] = `${Math.round(variableData.value)}`;
        } else {
          this.variables[key] = variableData ? variableData.value : 'N/A';
        }
      });
    },
    error: (error) => {
      console.error('Error fetching data:', error);
      this.isLoading = false; // Hide spinner even on error
    },
  });
}
